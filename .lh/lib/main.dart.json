{
    "sourceFile": "lib/main.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 12,
            "patches": [
                {
                    "date": 1690905550876,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1690905559796,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,23 +11,8 @@\n   Widget build(BuildContext context) {\n     return MaterialApp(\n       title: 'Flutter Demo',\n       theme: ThemeData(\n-        // This is the theme of your application.\n-        //\n-        // TRY THIS: Try running your application with \"flutter run\". You'll see\n-        // the application has a blue toolbar. Then, without quitting the app,\n-        // try changing the seedColor in the colorScheme below to Colors.green\n-        // and then invoke \"hot reload\" (save your changes or press the \"hot\n-        // reload\" button in a Flutter-supported IDE, or press \"r\" if you used\n-        // the command line to start the app).\n-        //\n-        // Notice that the counter didn't reset back to zero; the application\n-        // state is not lost during the reload. To reset the state, use hot\n-        // restart instead.\n-        //\n-        // This works for code too, not just values: Most code changes can be\n-        // tested with just a hot reload.\n         colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\n         useMaterial3: true,\n       ),\n       home: const MyHomePage(title: 'Flutter Demo Home Page'),\n@@ -37,17 +22,8 @@\n \n class MyHomePage extends StatefulWidget {\n   const MyHomePage({super.key, required this.title});\n \n-  // This widget is the home page of your application. It is stateful, meaning\n-  // that it has a State object (defined below) that contains fields that affect\n-  // how it looks.\n-\n-  // This class is the configuration for the state. It holds the values (in this\n-  // case the title) provided by the parent (in this case the App widget) and\n-  // used by the build method of the State. Fields in a Widget subclass are\n-  // always marked \"final\".\n-\n   final String title;\n \n   @override\n   State<MyHomePage> createState() => _MyHomePageState();\n"
                },
                {
                    "date": 1690905572854,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,13 +33,8 @@\n   int _counter = 0;\n \n   void _incrementCounter() {\n     setState(() {\n-      // This call to setState tells the Flutter framework that something has\n-      // changed in this State, which causes it to rerun the build method below\n-      // so that the display can reflect the updated values. If we changed\n-      // _counter without calling setState(), then the build method would not be\n-      // called again, and so nothing would appear to happen.\n       _counter++;\n     });\n   }\n \n@@ -93,8 +88,8 @@\n       floatingActionButton: FloatingActionButton(\n         onPressed: _incrementCounter,\n         tooltip: 'Increment',\n         child: const Icon(Icons.add),\n-      ), // This trailing comma makes auto-formatting nicer for build methods.\n+      ),\n     );\n   }\n }\n"
                },
                {
                    "date": 1690905580593,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,24 +56,9 @@\n         // the App.build method, and use it to set our appbar title.\n         title: Text(widget.title),\n       ),\n       body: Center(\n-        // Center is a layout widget. It takes a single child and positions it\n-        // in the middle of the parent.\n         child: Column(\n-          // Column is also a layout widget. It takes a list of children and\n-          // arranges them vertically. By default, it sizes itself to fit its\n-          // children horizontally, and tries to be as tall as its parent.\n-          //\n-          // Column has various properties to control how it sizes itself and\n-          // how it positions its children. Here we use mainAxisAlignment to\n-          // center the children vertically; the main axis here is the vertical\n-          // axis because Columns are vertical (the cross axis would be\n-          // horizontal).\n-          //\n-          // TRY THIS: Invoke \"debug painting\" (choose the \"Toggle Debug Paint\"\n-          // action in the IDE, or press \"p\" in the console), to see the\n-          // wireframe for each widget.\n           mainAxisAlignment: MainAxisAlignment.center,\n           children: <Widget>[\n             const Text(\n               'You have pushed the button this many times:',\n"
                },
                {
                    "date": 1690905587508,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,14 +47,9 @@\n     // fast, so that you can just rebuild anything that needs updating rather\n     // than having to individually change instances of widgets.\n     return Scaffold(\n       appBar: AppBar(\n-        // TRY THIS: Try changing the color here to a specific color (to\n-        // Colors.amber, perhaps?) and trigger a hot reload to see the AppBar\n-        // change color while the other colors stay the same.\n         backgroundColor: Theme.of(context).colorScheme.inversePrimary,\n-        // Here we take the value from the MyHomePage object that was created by\n-        // the App.build method, and use it to set our appbar title.\n         title: Text(widget.title),\n       ),\n       body: Center(\n         child: Column(\n"
                },
                {
                    "date": 1690905593134,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,14 +39,8 @@\n   }\n \n   @override\n   Widget build(BuildContext context) {\n-    // This method is rerun every time setState is called, for instance as done\n-    // by the _incrementCounter method above.\n-    //\n-    // The Flutter framework has been optimized to make rerunning build methods\n-    // fast, so that you can just rebuild anything that needs updating rather\n-    // than having to individually change instances of widgets.\n     return Scaffold(\n       appBar: AppBar(\n         backgroundColor: Theme.of(context).colorScheme.inversePrimary,\n         title: Text(widget.title),\n"
                },
                {
                    "date": 1690905787203,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,9 @@\n \n   @override\n   Widget build(BuildContext context) {\n     return MaterialApp(\n+      debugShowCheckedModeBanner: false,\n       title: 'Flutter Demo',\n       theme: ThemeData(\n         colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\n         useMaterial3: true,\n"
                },
                {
                    "date": 1690905827080,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,18 +15,16 @@\n       theme: ThemeData(\n         colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\n         useMaterial3: true,\n       ),\n-      home: const MyHomePage(title: 'Flutter Demo Home Page'),\n+      home: const MyHomePage(),\n     );\n   }\n }\n \n class MyHomePage extends StatefulWidget {\n-  const MyHomePage({super.key, required this.title});\n+  const MyHomePage({super.key});\n \n-  final String title;\n-\n   @override\n   State<MyHomePage> createState() => _MyHomePageState();\n }\n \n"
                },
                {
                    "date": 1690906185062,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n   Widget build(BuildContext context) {\n     return Scaffold(\n       appBar: AppBar(\n         backgroundColor: Theme.of(context).colorScheme.inversePrimary,\n-        title: Text(widget.title),\n+        title: const Text(''),\n       ),\n       body: Center(\n         child: Column(\n           mainAxisAlignment: MainAxisAlignment.center,\n"
                },
                {
                    "date": 1690906310722,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n   Widget build(BuildContext context) {\n     return Scaffold(\n       appBar: AppBar(\n         backgroundColor: Theme.of(context).colorScheme.inversePrimary,\n-        title: const Text(''),\n+        title: const Text('Ship'),\n       ),\n       body: Center(\n         child: Column(\n           mainAxisAlignment: MainAxisAlignment.center,\n"
                },
                {
                    "date": 1690906318002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n   Widget build(BuildContext context) {\n     return Scaffold(\n       appBar: AppBar(\n         backgroundColor: Theme.of(context).colorScheme.inversePrimary,\n-        title: const Text('Ship'),\n+        title: const Text('Shipmenta]s'),\n       ),\n       body: Center(\n         child: Column(\n           mainAxisAlignment: MainAxisAlignment.center,\n"
                },
                {
                    "date": 1690907407391,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,8 +42,9 @@\n     return Scaffold(\n       appBar: AppBar(\n         backgroundColor: Theme.of(context).colorScheme.inversePrimary,\n         title: const Text('Shipments'),\n+        centerTitle: true,\n       ),\n       body: Center(\n         child: Column(\n           mainAxisAlignment: MainAxisAlignment.center,\n"
                },
                {
                    "date": 1690907623426,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n     return MaterialApp(\n       debugShowCheckedModeBanner: false,\n       title: 'Flutter Demo',\n       theme: ThemeData(\n-        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\n+        colorScheme: ColorScheme.fromSeed(seedColor: Colors.purple),\n         useMaterial3: true,\n       ),\n       home: const MyHomePage(),\n     );\n"
                }
            ],
            "date": 1690905550876,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Flutter Demo',\n      theme: ThemeData(\n        // This is the theme of your application.\n        //\n        // TRY THIS: Try running your application with \"flutter run\". You'll see\n        // the application has a blue toolbar. Then, without quitting the app,\n        // try changing the seedColor in the colorScheme below to Colors.green\n        // and then invoke \"hot reload\" (save your changes or press the \"hot\n        // reload\" button in a Flutter-supported IDE, or press \"r\" if you used\n        // the command line to start the app).\n        //\n        // Notice that the counter didn't reset back to zero; the application\n        // state is not lost during the reload. To reset the state, use hot\n        // restart instead.\n        //\n        // This works for code too, not just values: Most code changes can be\n        // tested with just a hot reload.\n        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),\n        useMaterial3: true,\n      ),\n      home: const MyHomePage(title: 'Flutter Demo Home Page'),\n    );\n  }\n}\n\nclass MyHomePage extends StatefulWidget {\n  const MyHomePage({super.key, required this.title});\n\n  // This widget is the home page of your application. It is stateful, meaning\n  // that it has a State object (defined below) that contains fields that affect\n  // how it looks.\n\n  // This class is the configuration for the state. It holds the values (in this\n  // case the title) provided by the parent (in this case the App widget) and\n  // used by the build method of the State. Fields in a Widget subclass are\n  // always marked \"final\".\n\n  final String title;\n\n  @override\n  State<MyHomePage> createState() => _MyHomePageState();\n}\n\nclass _MyHomePageState extends State<MyHomePage> {\n  int _counter = 0;\n\n  void _incrementCounter() {\n    setState(() {\n      // This call to setState tells the Flutter framework that something has\n      // changed in this State, which causes it to rerun the build method below\n      // so that the display can reflect the updated values. If we changed\n      // _counter without calling setState(), then the build method would not be\n      // called again, and so nothing would appear to happen.\n      _counter++;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    // This method is rerun every time setState is called, for instance as done\n    // by the _incrementCounter method above.\n    //\n    // The Flutter framework has been optimized to make rerunning build methods\n    // fast, so that you can just rebuild anything that needs updating rather\n    // than having to individually change instances of widgets.\n    return Scaffold(\n      appBar: AppBar(\n        // TRY THIS: Try changing the color here to a specific color (to\n        // Colors.amber, perhaps?) and trigger a hot reload to see the AppBar\n        // change color while the other colors stay the same.\n        backgroundColor: Theme.of(context).colorScheme.inversePrimary,\n        // Here we take the value from the MyHomePage object that was created by\n        // the App.build method, and use it to set our appbar title.\n        title: Text(widget.title),\n      ),\n      body: Center(\n        // Center is a layout widget. It takes a single child and positions it\n        // in the middle of the parent.\n        child: Column(\n          // Column is also a layout widget. It takes a list of children and\n          // arranges them vertically. By default, it sizes itself to fit its\n          // children horizontally, and tries to be as tall as its parent.\n          //\n          // Column has various properties to control how it sizes itself and\n          // how it positions its children. Here we use mainAxisAlignment to\n          // center the children vertically; the main axis here is the vertical\n          // axis because Columns are vertical (the cross axis would be\n          // horizontal).\n          //\n          // TRY THIS: Invoke \"debug painting\" (choose the \"Toggle Debug Paint\"\n          // action in the IDE, or press \"p\" in the console), to see the\n          // wireframe for each widget.\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            const Text(\n              'You have pushed the button this many times:',\n            ),\n            Text(\n              '$_counter',\n              style: Theme.of(context).textTheme.headlineMedium,\n            ),\n          ],\n        ),\n      ),\n      floatingActionButton: FloatingActionButton(\n        onPressed: _incrementCounter,\n        tooltip: 'Increment',\n        child: const Icon(Icons.add),\n      ), // This trailing comma makes auto-formatting nicer for build methods.\n    );\n  }\n}\n"
        }
    ]
}